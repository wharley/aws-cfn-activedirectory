AWSTemplateFormatVersion: '2010-09-09'
Description: 'This template enables roles and EC2 Windows instance.'

Parameters:
  KeyName:
    MinLength: 1
    Type: AWS::EC2::KeyPair::KeyName

  InstanceType:
    Description: 'Amazon EC2 instance type'
    Type: 'String'
    Default: m1.large
    AllowedValues:
      - t1.micro
      - t2.micro
      - t2.small
      - t2.medium
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge

  Roles:
    Description: 'A space seperated list of roles that you want to enable on this instance. Valid values are AD-Certificate, AD-Domain-Services, ADLDS, DHCP, DNS, Fax, File-Services, NPAS, Print-Services, Web-Server, and WDS.'
    Type: 'String'
    Default: 'None'
    AllowedPattern: '(((AD\\-Certificate)|(AD\\-Domain\\-Services)|(ADLDS)|(DHCP)|(DNS)|(Fax)|(File\\-Services)|(NPAS)|(Print\\-Services)|(Web\\-Server)|(WDS))( ((AD\\-Certificate)|(AD\\-Domain\\-Services)|(ADLDS)|(DHCP)|(DNS)|(Fax)|(File\\-Services)|(NPAS)|(Print\\-Services)|(Web\\-Server)|(WDS)))*)|(None)'

  SourceCidrForRDP:
    Description: 'IP Cidr from which you are likely to RDP into the instances. You can add rules later by modifying the created security groups e.g. 54.32.98.160/32'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '^([0-9]+\.){3}[0-9]+\/[0-9]+$'
    Default: 0.0.0.0/0

Mappings:
  AWSRegion2AMI:
    AMI:
      WS2016FULLBASE: Windows_Server-2016-English-Full-Base-2018.10.14
    us-east-1:
      WS2016FULLBASE: ami-050202fb72f001b47
    us-east-2:
      WS2016FULLBASE: ami-028779930ada5200c
    us-west-1:
      WS2016FULLBASE: ami-0c6a4d561b38c05ed
    us-west-2:
      WS2016FULLBASE: ami-017bf00eb0d4c7182
    eu-west-1:
      WS2016FULLBASE: ami-08838e38cfe4854ad
    eu-west-2:
      WS2016FULLBASE: ami-0f5f78829606035fc

Resources:
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable RDP
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3389'
          ToPort: '3389'
          CidrIp: !Ref SourceCidrForRDP

  WindowsServer:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\\cfn\\cfn-hup.conf:
              content:
                Fn::Join:
                  - ''
                  - - '[main]\n'
                    - stack=
                    - Ref: AWS::StackId
                    - '\n'
                    - region=
                    - Ref: AWS::Region
                    - '\n'
            c:\\cfn\\hooks.d\\cfn-auto-reloader.conf:
              content:
                Fn::Join:
                  - ''
                  - - '[cfn-auto-reloader-hook]\n'
                    - 'triggers=post.update\n'
                    - 'path=Resources.WindowsServer.Metadata.AWS::CloudFormation::Init\n'
                    - 'action=cfn-init.exe -v -s '
                    - Ref: AWS::StackId
                    - ' -r WindowsServer'
                    - ' --region '
                    - Ref: AWS::Region
                    - '\n'

          commands:
            1-install-roles:
              command:
                Fn::Join:
                  - ''
                  - - 'if not \"None\" EQU \"'
                    - !Ref Roles
                    - '\" (servermanagercmd -install '
                    - !Ref Roles
                    - ' -restart)'
            2-signal-success:
              command:
                Fn::Join:
                  - ''
                  - - 'cfn-signal.exe -e %ERRORLEVEL% \"'
                    - Fn::Base64: WindowsServerWaitHandle
                    - '\n"'

          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                  - c:\\cfn\\cfn-hup.conf
                  - c:\\cfn\\hooks.d\\cfn-auto-reloader.conf

    Properties:
      InstanceType:
        Ref: InstanceType
      ImageId:
        Fn::FindInMap:
          - AWSRegion2AMI
          - Ref: AWS::Region
          - WS2016FULLBASE
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      KeyName:
        Ref: KeyName
      UserData:
        Fn::Base64:
          Fn::Join:
            - ''
            - - '<script>\n'
              - 'cfn-init.exe -v -s '
              - Ref: AWS::StackId
              - ' -r WindowsServer'
              - ' --region '
              - Ref: AWS::Region
              - '\n'
              - '</script>'

  WindowsServerWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  WindowsServerWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: WindowsServer
    Properties:
      Handle:
        Ref: WindowsServerWaitHandle
      Timeout: '1000'

Outputs:
  RolesEnabled:
    Value: !Ref Roles
    Description: 'Roles enabled on this instance.'
