AWSTemplateFormatVersion: '2010-09-09'
Description: This template creates a single server installation of Active Directory.
  EC2 Windows Server 2016
  Security Group with all AD components
  Automatically install the roles for Activ Directory.

Parameters:
  InstanceType:
    Description: Amazon EC2 instance type
    Type: String
    Default: t2.small
    AllowedValues:
    - t1.micro
    - t2.micro
    - t2.small
    - t2.medium
    - m1.small
    - m1.medium
    - m1.large
    - m1.xlarge
    - m2.xlarge
    - m2.2xlarge
    - m2.4xlarge
    - m3.medium
    - m3.large
    - m3.xlarge
    - m3.2xlarge
    - m4.large
    - m4.xlarge
    - m4.2xlarge
    - m4.4xlarge
    - m4.10xlarge
    - c1.medium
    - c1.xlarge
    - c3.large
    - c3.xlarge
    - c3.2xlarge
    - c3.4xlarge
    - c3.8xlarge
    - c4.large
    - c4.xlarge
    - c4.2xlarge
    - c4.4xlarge
    - c4.8xlarge
    - g2.2xlarge
    - r3.large
    - r3.xlarge
    - r3.2xlarge
    - r3.4xlarge
    - r3.8xlarge
    - i2.xlarge
    - i2.2xlarge
    - i2.4xlarge
    - i2.8xlarge
    - d2.xlarge
    - d2.2xlarge
    - d2.4xlarge
    - d2.8xlarge
    - hi1.4xlarge
    - hs1.8xlarge
    - cr1.8xlarge
    - cc2.8xlarge
    - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.

  Roles:
    Description: 'A space seperated list of roles that you want to enable on this instance. Valid values are AD-Certificate, AD-Domain-Services, ADLDS, DHCP, DNS, Fax, File-Services, NPAS, Print-Services, Web-Server, and WDS.'
    Type: 'String'
    Default: 'None'
    AllowedPattern: '(((AD\\-Certificate)|(AD\\-Domain\\-Services)|(ADLDS)|(DHCP)|(DNS)|(Fax)|(File\\-Services)|(NPAS)|(Print\\-Services)|(Web\\-Server)|(WDS))( ((AD\\-Certificate)|(AD\\-Domain\\-Services)|(ADLDS)|(DHCP)|(DNS)|(Fax)|(File\\-Services)|(NPAS)|(Print\\-Services)|(Web\\-Server)|(WDS)))*)|(None)'

  SourceCidrForRDP:
    Description: 'IP Cidr from which you are likely to RDP into the instances. You can add rules later by modifying the created security groups e.g. 54.32.98.160/32'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    AllowedPattern: '^([0-9]+\.){3}[0-9]+\/[0-9]+$'
    Default: 0.0.0.0/0

Mappings:
  AWSRegion2AMI:
    AMI:
      WS2016FULLBASE: Windows_Server-2016-English-Full-Base-2018.10.14
    ap-northeast-1:
      WS2016FULLBASE: ami-0134dae8964ea643c
    ap-northeast-2:
      WS2016FULLBASE: ami-0c6a4d561b38c05ed
    ap-south-1:
      WS2016FULLBASE: ami-0e9c4931f7c9d73f6
    ap-southeast-1:
      WS2016FULLBASE: ami-098731bcd06ea9ca6
    ap-southeast-2:
      WS2016FULLBASE: ami-0096a7a7add65af89
    ca-central-1:
      WS2016FULLBASE: ami-04a4290c9c20574d9
    eu-central-1:
      WS2016FULLBASE: ami-06af8c775c56b30ca
    eu-west-1:
      WS2016FULLBASE: ami-0cd8a780065ea078f
    eu-west-2:
      WS2016FULLBASE: ami-0f5f78829606035fc
    eu-west-3:
      WS2016FULLBASE: ami-0152e5e7567b014fc
    sa-east-1:
      WS2016FULLBASE: ami-0c3faf6ff12a7f005
    us-east-1:
      WS2016FULLBASE: ami-050202fb72f001b47
    us-east-2:
      WS2016FULLBASE: ami-028779930ada5200c
    us-west-1:
      WS2016FULLBASE: ami-08838e38cfe4854ad
    us-west-2:
      WS2016FULLBASE: ami-017bf00eb0d4c7182

Resources:
  DomainController:
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        config:
          files:
            c:\cfn\cfn-hup.conf:
              content:
                Fn::Join:
                - ''
                - - "[main]\n"
                  - stack=
                  - Ref: AWS::StackId
                  - "\n"
                  - region=
                  - Ref: AWS::Region
                  - "\n"
            c:\cfn\hooks.d\cfn-auto-reloader.conf:
              content:
                Fn::Join:
                - ''
                - - "[cfn-auto-reloader-hook]\n"
                  - 'triggers=post.update'
                  - 'path=Resources.DomainController.Metadata.AWS::CloudFormation::Init'
                  - 'action=cfn-init.exe -v -s '
                  - Ref: AWS::StackId
                  - " -r DomainController"
                  - " --region "
                  - Ref: AWS::Region
                  - "\n"
            C:\cfn\RunCommand.bat:
              content: |-
                %~1
                IF %ERRORLEVEL% GTR 10 ( exit /b 1 ) else ( exit /b 0 )
          commands:
            1-install-roles:
              command:
                Fn::Join:
                  - ''
                  - - 'if not \"None\" EQU \"'
                    - !Ref Roles
                    - '\" (servermanagercmd -install '
                    - !Ref Roles
                    - ' -restart)'

            2-signal-success:
              command:
                Fn::Join:
                - ''
                - - cfn-signal.exe -e 0 "
                  - Fn::Base64:
                      Ref: DomainControllerWaitHandle
                  - "\""
          services:
            windows:
              cfn-hup:
                enabled: 'true'
                ensureRunning: 'true'
                files:
                - c:\cfn\cfn-hup.conf
                - c:\cfn\hooks.d\cfn-auto-reloader.conf
    Properties:
      ImageId:
        Fn::FindInMap:
        - AWSRegion2AMI
        - Ref: AWS::Region
        - WS2016FULLBASE
      InstanceType:
        Ref: InstanceType
      SecurityGroups:
      - Ref: DomainControllerSecurityGroup
      KeyName: test-win
      UserData:
        Fn::Base64:
          Fn::Join:
          - ''
          - - "<script>\n"
            - 'cfn-init.exe -v -s '
            - Ref: AWS::StackId
            - " -r DomainController "
            - " --region "
            - Ref: AWS::Region
            - "\n"
            - "</script>"

  DomainControllerWaitCondition:
    Type: AWS::CloudFormation::WaitCondition
    DependsOn: DomainController
    Properties:
      Handle:
        Ref: DomainControllerWaitHandle
      Timeout: '1500'

  DomainControllerWaitHandle:
    Type: AWS::CloudFormation::WaitConditionHandle

  DomainControllerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Domain Controller
      SecurityGroupIngress:
      - IpProtocol: udp
        FromPort: '123'
        ToPort: '123'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: tcp
        FromPort: '135'
        ToPort: '135'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: udp
        FromPort: '138'
        ToPort: '138'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: tcp
        FromPort: '1024'
        ToPort: '65535'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: tcp
        FromPort: '389'
        ToPort: '389'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: udp
        FromPort: '389'
        ToPort: '389'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: tcp
        FromPort: '636'
        ToPort: '636'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: tcp
        FromPort: '3268'
        ToPort: '3268'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: tcp
        FromPort: '3269'
        ToPort: '3269'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: tcp
        FromPort: '53'
        ToPort: '53'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: udp
        FromPort: '53'
        ToPort: '53'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: tcp
        FromPort: '88'
        ToPort: '88'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: udp
        FromPort: '88'
        ToPort: '88'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: tcp
        FromPort: '445'
        ToPort: '445'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: udp
        FromPort: '445'
        ToPort: '445'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: udp
        FromPort: '135'
        ToPort: '135'
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup
      - IpProtocol: tcp
        FromPort: '3389'
        ToPort: '3389'
        CidrIp:
          Ref: SourceCidrForRDP
      - IpProtocol: icmp
        FromPort: "-1"
        ToPort: "-1"
        SourceSecurityGroupName:
          Ref: DomainMemberSecurityGroup

  DomainMemberSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Domain Members
      SecurityGroupIngress: []

  DomainMemberSecurityGroupIngress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupName:
        Ref: DomainMemberSecurityGroup
      IpProtocol: tcp
      FromPort: '3389'
      ToPort: '3389'
      CidrIp:
        Ref: SourceCidrForRDP
